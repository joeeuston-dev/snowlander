# Multi-stage build for minimal Alpine-based image
FROM python:3.11-alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    gcc \
    musl-dev \
    libffi-dev \
    opus-dev \
    python3-dev \
    build-base

# Set working directory
WORKDIR /app

# Copy and install Python dependencies
COPY requirements.txt .
RUN pip install --user --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-alpine

# Install runtime dependencies only
RUN apk add --no-cache \
    ffmpeg \
    opus \
    curl \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S snowlander && \
    adduser -S snowlander -u 1001 -G snowlander

# Set working directory
WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /root/.local /home/snowlander/.local

# Copy application code
COPY --chown=snowlander:snowlander . .

# Create data directories
RUN mkdir -p data/music data/database && \
    chown -R snowlander:snowlander data/

# Switch to non-root user
USER snowlander

# Set PATH to include user packages
ENV PATH=/home/snowlander/.local/bin:$PATH
ENV PYTHONPATH=/app
ENV MUSIC_DIRECTORY=/app/data/music
ENV DATABASE_PATH=/app/data/database/snowlander.db

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/api/status || exit 1

# Use exec form for proper signal handling
CMD ["python3", "main.py"]
